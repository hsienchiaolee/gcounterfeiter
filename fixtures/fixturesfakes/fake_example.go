// This file was generated by counterfeiter
package fixturesfakes

import (
	"sync"

	"github.com/tjarratt/gcounterfeiter/fixtures"
)

type FakeExample struct {
	SomethingStub              func()
	somethingMutex             sync.RWMutex
	somethingArgsForCall       []struct{}
	TakesAParameterStub        func(string)
	takesAParameterMutex       sync.RWMutex
	takesAParameterArgsForCall []struct {
		arg1 string
	}
	TakesAnIntStub        func(int)
	takesAnIntMutex       sync.RWMutex
	takesAnIntArgsForCall []struct {
		arg1 int
	}
	TakesAUint64Stub        func(uint64)
	takesAUint64Mutex       sync.RWMutex
	takesAUint64ArgsForCall []struct {
		arg1 uint64
	}
	TakesThreeParametersStub        func(string, string, string)
	takesThreeParametersMutex       sync.RWMutex
	takesThreeParametersArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	invocations map[string][][]interface{}
}

func (fake *FakeExample) Something() {
	fake.somethingMutex.Lock()
	fake.somethingArgsForCall = append(fake.somethingArgsForCall, struct{}{})
	fake.guard("Something")
	fake.invocations["Something"] = append(fake.invocations["Something"], []interface{}{})
	fake.somethingMutex.Unlock()
	if fake.SomethingStub != nil {
		fake.SomethingStub()
	}
}

func (fake *FakeExample) SomethingCallCount() int {
	fake.somethingMutex.RLock()
	defer fake.somethingMutex.RUnlock()
	return len(fake.somethingArgsForCall)
}

func (fake *FakeExample) TakesAParameter(arg1 string) {
	fake.takesAParameterMutex.Lock()
	fake.takesAParameterArgsForCall = append(fake.takesAParameterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.guard("TakesAParameter")
	fake.invocations["TakesAParameter"] = append(fake.invocations["TakesAParameter"], []interface{}{arg1})
	fake.takesAParameterMutex.Unlock()
	if fake.TakesAParameterStub != nil {
		fake.TakesAParameterStub(arg1)
	}
}

func (fake *FakeExample) TakesAParameterCallCount() int {
	fake.takesAParameterMutex.RLock()
	defer fake.takesAParameterMutex.RUnlock()
	return len(fake.takesAParameterArgsForCall)
}

func (fake *FakeExample) TakesAParameterArgsForCall(i int) string {
	fake.takesAParameterMutex.RLock()
	defer fake.takesAParameterMutex.RUnlock()
	return fake.takesAParameterArgsForCall[i].arg1
}

func (fake *FakeExample) TakesAnInt(arg1 int) {
	fake.takesAnIntMutex.Lock()
	fake.takesAnIntArgsForCall = append(fake.takesAnIntArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.guard("TakesAnInt")
	fake.invocations["TakesAnInt"] = append(fake.invocations["TakesAnInt"], []interface{}{arg1})
	fake.takesAnIntMutex.Unlock()
	if fake.TakesAnIntStub != nil {
		fake.TakesAnIntStub(arg1)
	}
}

func (fake *FakeExample) TakesAnIntCallCount() int {
	fake.takesAnIntMutex.RLock()
	defer fake.takesAnIntMutex.RUnlock()
	return len(fake.takesAnIntArgsForCall)
}

func (fake *FakeExample) TakesAnIntArgsForCall(i int) int {
	fake.takesAnIntMutex.RLock()
	defer fake.takesAnIntMutex.RUnlock()
	return fake.takesAnIntArgsForCall[i].arg1
}

func (fake *FakeExample) TakesAUint64(arg1 uint64) {
	fake.takesAUint64Mutex.Lock()
	fake.takesAUint64ArgsForCall = append(fake.takesAUint64ArgsForCall, struct {
		arg1 uint64
	}{arg1})
	fake.guard("TakesAUint64")
	fake.invocations["TakesAUint64"] = append(fake.invocations["TakesAUint64"], []interface{}{arg1})
	fake.takesAUint64Mutex.Unlock()
	if fake.TakesAUint64Stub != nil {
		fake.TakesAUint64Stub(arg1)
	}
}

func (fake *FakeExample) TakesAUint64CallCount() int {
	fake.takesAUint64Mutex.RLock()
	defer fake.takesAUint64Mutex.RUnlock()
	return len(fake.takesAUint64ArgsForCall)
}

func (fake *FakeExample) TakesAUint64ArgsForCall(i int) uint64 {
	fake.takesAUint64Mutex.RLock()
	defer fake.takesAUint64Mutex.RUnlock()
	return fake.takesAUint64ArgsForCall[i].arg1
}

func (fake *FakeExample) TakesThreeParameters(arg1 string, arg2 string, arg3 string) {
	fake.takesThreeParametersMutex.Lock()
	fake.takesThreeParametersArgsForCall = append(fake.takesThreeParametersArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.guard("TakesThreeParameters")
	fake.invocations["TakesThreeParameters"] = append(fake.invocations["TakesThreeParameters"], []interface{}{arg1, arg2, arg3})
	fake.takesThreeParametersMutex.Unlock()
	if fake.TakesThreeParametersStub != nil {
		fake.TakesThreeParametersStub(arg1, arg2, arg3)
	}
}

func (fake *FakeExample) TakesThreeParametersCallCount() int {
	fake.takesThreeParametersMutex.RLock()
	defer fake.takesThreeParametersMutex.RUnlock()
	return len(fake.takesThreeParametersArgsForCall)
}

func (fake *FakeExample) TakesThreeParametersArgsForCall(i int) (string, string, string) {
	fake.takesThreeParametersMutex.RLock()
	defer fake.takesThreeParametersMutex.RUnlock()
	return fake.takesThreeParametersArgsForCall[i].arg1, fake.takesThreeParametersArgsForCall[i].arg2, fake.takesThreeParametersArgsForCall[i].arg3
}

func (fake *FakeExample) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeExample) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ fixtures.Example = new(FakeExample)
