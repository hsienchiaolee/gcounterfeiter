// This file was generated by counterfeiter
package fixturesfakes

import (
	"sync"

	"github.com/tjarratt/gcounterfeiter/fixtures"
)

type FakeExample struct {
	SomethingStub              func()
	somethingMutex             sync.RWMutex
	somethingArgsForCall       []struct{}
	TakesAParameterStub        func(string)
	takesAParameterMutex       sync.RWMutex
	takesAParameterArgsForCall []struct {
		arg1 string
	}
	invocations map[string][][]interface{}
}

func (fake *FakeExample) Something() {
	fake.somethingMutex.Lock()
	fake.somethingArgsForCall = append(fake.somethingArgsForCall, struct{}{})

	fake.guard("Something")
	fake.invocations["Something"] = append(fake.invocations["Something"], []interface{}{})

	fake.somethingMutex.Unlock()
	if fake.SomethingStub != nil {
		fake.SomethingStub()
	}
}

func (fake *FakeExample) SomethingCallCount() int {
	fake.somethingMutex.RLock()
	defer fake.somethingMutex.RUnlock()
	return len(fake.somethingArgsForCall)
}

func (fake *FakeExample) TakesAParameter(arg1 string) {
	fake.takesAParameterMutex.Lock()
	fake.takesAParameterArgsForCall = append(fake.takesAParameterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.guard("TakesAParameter")
	fake.invocations["TakesAParameter"] = append(fake.invocations["TakesAParameter"], []interface{}{arg1})
	fake.takesAParameterMutex.Unlock()
	if fake.TakesAParameterStub != nil {
		fake.TakesAParameterStub(arg1)
	}
}

func (fake *FakeExample) TakesAParameterCallCount() int {
	fake.takesAParameterMutex.RLock()
	defer fake.takesAParameterMutex.RUnlock()
	return len(fake.takesAParameterArgsForCall)
}

func (fake *FakeExample) TakesAParameterArgsForCall(i int) string {
	fake.takesAParameterMutex.RLock()
	defer fake.takesAParameterMutex.RUnlock()
	return fake.takesAParameterArgsForCall[i].arg1
}

func (fake *FakeExample) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeExample) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ fixtures.Example = new(FakeExample)
